# 一、SQL注入

### 1、定义

通过把SQL命令插入到Web表单递交或输入域名或页面请求的查询字符串，最终达到欺骗服务器执行恶意的SQL命令

具体来说，它是利用现有应用程序，将SQL语句注入到后台数据库引擎执行的能力，它可以通过在Web表单中输入SQL语句得到一个存在安全漏洞的网站上的数据，而不是按照设计者意图去执行SQL语句。

### 2、原理

 SQL注入攻击指的是通过构建特殊的输入作为参数传入Web应用程序，而这些输入大都是SQL语法里的一些组合，通过执行SQL语句进而执行攻击者所要的操作，其主要原因是程序没有细致地过滤用户输入的数据，致使非法数据侵入系统。

### 3、产生原因

SQL注入可以分为平台层注入和代码层注入。前者由不安全的数据库配置或数据库平台的漏洞所致；后者主要是由于程序员对输入未进行细致地过滤，从而执行了非法的数据查询。

基于此，SQL注入的产生原因通常表现在以下几方面：

①不当的类型处理；②不安全的数据库配置；③不合理的查询集处理；④不当的错误处理；⑤转义字符处理不合适；⑥多个提交处理不当。



### 4、sql注入的威胁

- ​    绕过认证，获得非法权限
- ​    猜解后台数据库全部的信息
- ​    注入可以借助数据库的存储过程进行提权等操作





## 二、SQL注入漏洞的方法

单引号可能导致sql注入

### 1、数字注入

在浏览器地址栏输入：learn.me/sql/article.php?id=1，这是一个get型接口，发送这个请求相当于调用一个查询语句：

```
$sql = "SELECT * FROM article WHERE id =",$id
```

正常情况下，应该返回一个id=1的文章信息。那么，如果在浏览器地址栏输入：learn.me/sql/article.php?id=-1 OR 1 =1，这就是一个SQL注入攻击了，可能会返回所有文章的相关信息。为什么会这样呢？

这是因为，id = -1永远是false，1=1永远是true，所有整个where语句永远是ture，所以where条件相当于没有加where条件，那么查询的结果相当于整张表的内容



### 2、字符串注入

 有这样一个用户登录场景：登录界面包括用户名和密码输入框，以及提交按钮。输入用户名和密码，提交。

   这是一个post请求，登录时调用接口learn.me/sql/login.html，首先连接数据库，然后后台对post请求参数中携带的用户名、密码进行参数校验，即sql的查询过程。假设正确的用户名和密码为user和pwd123，输入正确的用户名和密码、提交，相当于调用了以下的SQL语句：

```SQL
SELECT * FROM user WHERE username = 'user' ADN password = 'pwd123'
```

于用户名和密码都是字符串，SQL注入方法即把参数携带的数据变成mysql中注释的字符串。mysql中有2种注释的方法：

#### 1）'#'

'#'后所有的字符串都会被当成注释来处理

  用户名输入：user'#（单引号闭合user左边的单引号），密码随意输入，如：111，然后点击提交按钮。等价于SQL语句：

```SQL
SELECT * FROM user WHERE username = 'user'#'ADN password = '111'
```

  '#'后面都被注释掉了，相当于：

```SQL
SELECT * FROM user WHERE username = 'user' 
```

#### 2）'-- ' （--后面有个空格）

'-- '后面的字符串都会被当成注释来处理

  用户名输入：**user'--** （注意--后面有个空格，单引号闭合user左边的单引号），密码随意输入，如：111，然后点击提交按钮。等价于SQL语句：

```SQL
SELECT * FROM user WHERE username = 'user'-- 'AND password = '111'
```

'-- '后面都被注释掉了，相当于：

```SQL
SELECT * FROM user WHERE username = 'user'
```

 因此，以上两种情况可能输入一个错误的密码或者不输入密码就可登录用户名为'user'的账号，这是十分危险的事情。





## 三、预防 SQL 注入攻击的方法

1. 严格限制 Web 应用的数据库的操作权限，给连接数据库的用户提供满足需要的最低权限，最大限度的减少注入攻击对数据库的危害
2. 校验参数的数据格式是否合法（可以使用正则或特殊字符的判断）
3. 对进入数据库的特殊字符进行转义处理，或编码转换
4. 预编译 SQL（Java 中使用 PreparedStatement），参数化查询方式，避免 SQL 拼接
5. 发布前，利用工具进行 SQL 注入检测
6. 报错信息不要包含 SQL 信息输出到 Web 页面





SQL注入漏洞检测工具： Sqlmap 



## 参考文章

[sql注入原理详解](https://www.cnblogs.com/insane-Mr-Li/p/9133602.html)

[如何避免sql注入](https://github.com/astaxie/build-web-application-with-golang/blob/master/zh/09.4.md)



















